local M = {}

function M.get()
  local palette = require("myerslabs.palette").get()

  return {
    -- Core vim highlights
    Normal = { fg = palette.fg, bg = palette.bg },
    NormalFloat = { fg = palette.fg, bg = palette.bg },
    FloatBorder = { fg = palette.border, bg = palette.bg },
    CursorLine = { bg = palette.cursorline },
    CursorColumn = { bg = palette.cursorline },
    Visual = { bg = palette.visual },
    VisualNOS = { bg = palette.visual },
    Search = { fg = palette.bg, bg = palette.accent },
    IncSearch = { fg = palette.bg, bg = palette.accent },
    LineNr = { fg = palette.dim },
    CursorLineNr = { fg = palette.accent, bold = true },
    Folded = { fg = palette.dim, bg = palette.selection },
    FoldColumn = { fg = palette.dim },
    SignColumn = { bg = palette.bg },
    ColorColumn = { bg = palette.selection },
    VertSplit = { fg = palette.border },
    WinSeparator = { fg = palette.border },
    StatusLine = { fg = palette.fg, bg = palette.selection },
    StatusLineNC = { fg = palette.dim, bg = palette.selection },
    Pmenu = { fg = palette.fg, bg = palette.selection },
    PmenuSel = { fg = palette.bg, bg = palette.accent },
    PmenuSbar = { bg = palette.selection },
    PmenuThumb = { bg = palette.accent },
    TabLine = { fg = palette.dim, bg = palette.selection },
    TabLineFill = { bg = palette.selection },
    TabLineSel = { fg = palette.fg, bg = palette.bg },
    WildMenu = { fg = palette.bg, bg = palette.accent },
    Directory = { fg = palette.accent },
    Title = { fg = palette.accent, bold = true },
    ErrorMsg = { fg = palette.error },
    WarningMsg = { fg = palette.warning },
    MoreMsg = { fg = palette.info },
    Question = { fg = palette.info },
    SpecialKey = { fg = palette.dim },
    NonText = { fg = palette.dim },
    Whitespace = { fg = palette.dim },
    MatchParen = { fg = palette.accent, bold = true },
    Conceal = { fg = palette.dim },

    -- Syntax highlighting
    Comment = { fg = palette.dim, italic = true },
    Constant = { fg = palette.accent },
    String = { fg = palette.hint },
    Character = { fg = palette.hint },
    Number = { fg = palette.accent },
    Boolean = { fg = palette.accent },
    Float = { fg = palette.accent },
    Identifier = { fg = palette.fg },
    Function = { fg = palette.info },
    Statement = { fg = palette.accent },
    Conditional = { fg = palette.accent },
    Repeat = { fg = palette.accent },
    Label = { fg = palette.accent },
    Operator = { fg = palette.fg },
    Keyword = { fg = palette.accent },
    Exception = { fg = palette.accent },
    PreProc = { fg = palette.accent },
    Include = { fg = palette.accent },
    Define = { fg = palette.accent },
    Macro = { fg = palette.accent },
    PreCondit = { fg = palette.accent },
    Type = { fg = palette.info },
    StorageClass = { fg = palette.accent },
    Structure = { fg = palette.info },
    Typedef = { fg = palette.info },
    Special = { fg = palette.accent },
    SpecialChar = { fg = palette.accent },
    Tag = { fg = palette.accent },
    Delimiter = { fg = palette.fg },
    SpecialComment = { fg = palette.dim },
    Debug = { fg = palette.error },
    Underlined = { underline = true },
    Ignore = { fg = palette.dim },
    Error = { fg = palette.error },
    Todo = { fg = palette.bg, bg = palette.warning, bold = true },

    -- Diff
    DiffAdd = { fg = palette.hint },
    DiffChange = { fg = palette.warning },
    DiffDelete = { fg = palette.error },
    DiffText = { fg = palette.warning, bold = true },

    -- LSP
    DiagnosticError = { fg = palette.error },
    DiagnosticWarn = { fg = palette.warning },
    DiagnosticInfo = { fg = palette.info },
    DiagnosticHint = { fg = palette.hint },
    DiagnosticUnderlineError = { undercurl = true, sp = palette.error },
    DiagnosticUnderlineWarn = { undercurl = true, sp = palette.warning },
    DiagnosticUnderlineInfo = { undercurl = true, sp = palette.info },
    DiagnosticUnderlineHint = { undercurl = true, sp = palette.hint },
    DiagnosticSignError = { fg = palette.error },
    DiagnosticSignWarn = { fg = palette.warning },
    DiagnosticSignInfo = { fg = palette.info },
    DiagnosticSignHint = { fg = palette.hint },

    -- Treesitter
    ["@variable"] = { fg = palette.fg },
    ["@variable.builtin"] = { fg = palette.accent },
    ["@variable.parameter"] = { fg = palette.fg },
    ["@variable.member"] = { fg = palette.fg },
    ["@constant"] = { fg = palette.accent },
    ["@constant.builtin"] = { fg = palette.accent },
    ["@constant.macro"] = { fg = palette.accent },
    ["@module"] = { fg = palette.info },
    ["@label"] = { fg = palette.accent },
    ["@string"] = { fg = palette.hint },
    ["@string.documentation"] = { fg = palette.dim },
    ["@string.regexp"] = { fg = palette.accent },
    ["@string.escape"] = { fg = palette.accent },
    ["@string.special"] = { fg = palette.accent },
    ["@character"] = { fg = palette.hint },
    ["@character.special"] = { fg = palette.accent },
    ["@boolean"] = { fg = palette.accent },
    ["@number"] = { fg = palette.accent },
    ["@number.float"] = { fg = palette.accent },
    ["@type"] = { fg = palette.info },
    ["@type.builtin"] = { fg = palette.info },
    ["@type.qualifier"] = { fg = palette.accent },
    ["@attribute"] = { fg = palette.accent },
    ["@property"] = { fg = palette.fg },
    ["@function"] = { fg = palette.info },
    ["@function.builtin"] = { fg = palette.info },
    ["@function.call"] = { fg = palette.info },
    ["@function.macro"] = { fg = palette.accent },
    ["@function.method"] = { fg = palette.info },
    ["@function.method.call"] = { fg = palette.info },
    ["@constructor"] = { fg = palette.info },
    ["@operator"] = { fg = palette.fg },
    ["@keyword"] = { fg = palette.accent },
    ["@keyword.coroutine"] = { fg = palette.accent },
    ["@keyword.function"] = { fg = palette.accent },
    ["@keyword.operator"] = { fg = palette.accent },
    ["@keyword.import"] = { fg = palette.accent },
    ["@keyword.type"] = { fg = palette.accent },
    ["@keyword.modifier"] = { fg = palette.accent },
    ["@keyword.repeat"] = { fg = palette.accent },
    ["@keyword.return"] = { fg = palette.accent },
    ["@keyword.debug"] = { fg = palette.accent },
    ["@keyword.exception"] = { fg = palette.accent },
    ["@keyword.conditional"] = { fg = palette.accent },
    ["@keyword.conditional.ternary"] = { fg = palette.accent },
    ["@keyword.directive"] = { fg = palette.accent },
    ["@keyword.directive.define"] = { fg = palette.accent },
    ["@punctuation.delimiter"] = { fg = palette.fg },
    ["@punctuation.bracket"] = { fg = palette.fg },
    ["@punctuation.special"] = { fg = palette.accent },
    ["@comment"] = { fg = palette.dim, italic = true },
    ["@comment.documentation"] = { fg = palette.dim },
    ["@comment.error"] = { fg = palette.error },
    ["@comment.warning"] = { fg = palette.warning },
    ["@comment.todo"] = { fg = palette.bg, bg = palette.warning },
    ["@comment.note"] = { fg = palette.bg, bg = palette.info },
    ["@markup.strong"] = { bold = true },
    ["@markup.italic"] = { italic = true },
    ["@markup.strikethrough"] = { strikethrough = true },
    ["@markup.underline"] = { underline = true },
    ["@markup.heading"] = { fg = palette.accent, bold = true },
    ["@markup.quote"] = { fg = palette.dim, italic = true },
    ["@markup.math"] = { fg = palette.accent },
    ["@markup.link"] = { fg = palette.info, underline = true },
    ["@markup.link.label"] = { fg = palette.accent },
    ["@markup.link.url"] = { fg = palette.info, underline = true },
    ["@markup.raw"] = { fg = palette.hint },
    ["@markup.raw.block"] = { fg = palette.hint },
    ["@markup.list"] = { fg = palette.accent },
    ["@markup.list.checked"] = { fg = palette.hint },
    ["@markup.list.unchecked"] = { fg = palette.dim },
    ["@diff.plus"] = { fg = palette.hint },
    ["@diff.minus"] = { fg = palette.error },
    ["@diff.delta"] = { fg = palette.warning },
    ["@tag"] = { fg = palette.accent },
    ["@tag.attribute"] = { fg = palette.info },
    ["@tag.delimiter"] = { fg = palette.fg },

    -- Telescope
    TelescopePromptTitle = { fg = palette.bg, bg = palette.accent },
    TelescopePreviewTitle = { fg = palette.bg, bg = palette.info },
    TelescopeResultsTitle = { fg = palette.bg, bg = palette.dim },
    TelescopePromptBorder = { fg = palette.accent, bg = palette.bg },
    TelescopePreviewBorder = { fg = palette.info, bg = palette.bg },
    TelescopeResultsBorder = { fg = palette.dim, bg = palette.bg },
    TelescopeSelection = { bg = palette.selection },
    TelescopeSelectionCaret = { fg = palette.accent },
    TelescopeMatching = { fg = palette.accent, bold = true },

    -- GitSigns
    GitSignsAdd = { fg = palette.hint },
    GitSignsChange = { fg = palette.warning },
    GitSignsDelete = { fg = palette.error },
    GitSignsAddNr = { fg = palette.hint },
    GitSignsChangeNr = { fg = palette.warning },
    GitSignsDeleteNr = { fg = palette.error },
    GitSignsAddLn = { bg = palette.hint },
    GitSignsChangeLn = { bg = palette.warning },
    GitSignsDeleteLn = { bg = palette.error },

    -- nvim-cmp
    CmpItemAbbr = { fg = palette.fg },
    CmpItemAbbrDeprecated = { fg = palette.dim, strikethrough = true },
    CmpItemAbbrMatch = { fg = palette.accent, bold = true },
    CmpItemAbbrMatchFuzzy = { fg = palette.accent },
    CmpItemKind = { fg = palette.info },
    CmpItemKindDefault = { fg = palette.info },
    CmpItemKindKeyword = { fg = palette.accent },
    CmpItemKindVariable = { fg = palette.fg },
    CmpItemKindConstant = { fg = palette.accent },
    CmpItemKindReference = { fg = palette.fg },
    CmpItemKindValue = { fg = palette.accent },
    CmpItemKindFunction = { fg = palette.info },
    CmpItemKindMethod = { fg = palette.info },
    CmpItemKindConstructor = { fg = palette.info },
    CmpItemKindClass = { fg = palette.info },
    CmpItemKindInterface = { fg = palette.info },
    CmpItemKindStruct = { fg = palette.info },
    CmpItemKindEvent = { fg = palette.info },
    CmpItemKindEnum = { fg = palette.info },
    CmpItemKindUnit = { fg = palette.accent },
    CmpItemKindModule = { fg = palette.info },
    CmpItemKindProperty = { fg = palette.fg },
    CmpItemKindField = { fg = palette.fg },
    CmpItemKindTypeParameter = { fg = palette.info },
    CmpItemKindEnumMember = { fg = palette.accent },
    CmpItemKindOperator = { fg = palette.fg },
    CmpItemKindSnippet = { fg = palette.hint },
    CmpItemKindText = { fg = palette.fg },
    CmpItemKindFile = { fg = palette.info },
    CmpItemKindFolder = { fg = palette.info },
    CmpItemKindColor = { fg = palette.accent },

    -- WhichKey
    WhichKey = { fg = palette.accent },
    WhichKeyGroup = { fg = palette.info },
    WhichKeyDesc = { fg = palette.info },
    WhichKeySeperator = { fg = palette.dim },
    WhichKeySeparator = { fg = palette.dim },
    WhichKeyFloat = { bg = palette.selection },
    WhichKeyValue = { fg = palette.dim },

    -- Notify
    NotifyBackground = { bg = palette.bg },
    NotifyERRORBorder = { fg = palette.error },
    NotifyWARNBorder = { fg = palette.warning },
    NotifyINFOBorder = { fg = palette.info },
    NotifyDEBUGBorder = { fg = palette.dim },
    NotifyTRACEBorder = { fg = palette.accent },
    NotifyERRORIcon = { fg = palette.error },
    NotifyWARNIcon = { fg = palette.warning },
    NotifyINFOIcon = { fg = palette.info },
    NotifyDEBUGIcon = { fg = palette.dim },
    NotifyTRACEIcon = { fg = palette.accent },
    NotifyERRORTitle = { fg = palette.error },
    NotifyWARNTitle = { fg = palette.warning },
    NotifyINFOTitle = { fg = palette.info },
    NotifyDEBUGTitle = { fg = palette.dim },
    NotifyTRACETitle = { fg = palette.accent },

    -- Neo-tree
    NeoTreeNormal = { fg = palette.fg, bg = palette.bg },
    NeoTreeNormalNC = { fg = palette.fg, bg = palette.bg },
    NeoTreeDirectoryName = { fg = palette.info },
    NeoTreeDirectoryIcon = { fg = palette.info },
    NeoTreeRootName = { fg = palette.accent, bold = true },
    NeoTreeFileName = { fg = palette.fg },
    NeoTreeFileIcon = { fg = palette.fg },
    NeoTreeFileNameOpened = { fg = palette.accent },
    NeoTreeIndentMarker = { fg = palette.dim },
    NeoTreeExpander = { fg = palette.dim },
    NeoTreeTabInactive = { fg = palette.dim, bg = palette.selection },
    NeoTreeTabActive = { fg = palette.fg, bg = palette.bg },
    NeoTreeTabSeparatorInactive = { fg = palette.border, bg = palette.selection },
    NeoTreeTabSeparatorActive = { fg = palette.border, bg = palette.bg },

    -- Dashboard/Alpha
    DashboardShortCut = { fg = palette.accent },
    DashboardHeader = { fg = palette.info },
    DashboardCenter = { fg = palette.accent },
    DashboardFooter = { fg = palette.dim, italic = true },
    AlphaShortcut = { fg = palette.accent },
    AlphaHeader = { fg = palette.info },
    AlphaHeaderLabel = { fg = palette.accent },
    AlphaFooter = { fg = palette.dim, italic = true },
    AlphaButtons = { fg = palette.info },

    -- Trouble
    TroubleText = { fg = palette.fg },
    TroubleCount = { fg = palette.accent, bg = palette.selection },
    TroubleNormal = { fg = palette.fg, bg = palette.bg },

    -- illuminate
    IlluminatedWordText = { bg = palette.selection },
    IlluminatedWordRead = { bg = palette.selection },
    IlluminatedWordWrite = { bg = palette.selection },

    -- Leap
    LeapMatch = { fg = palette.bg, bg = palette.accent, bold = true },
    LeapLabelPrimary = { fg = palette.bg, bg = palette.accent, bold = true },
    LeapLabelSecondary = { fg = palette.bg, bg = palette.info, bold = true },
  }
end

return M
